New


###   Timing and Benchmarks


------------------------------


The command  hib_timer  initiates two test close-coupled calculations for benchmarking the speed of your platform.  The

test calculations are:


- A calculation for collisions of Ar with N 2 , involving 961 channels with 96 sectors in the log-derivative

propagation and 30 sectors in the Airy propagation


- A calculation for collisions of Ar with NO, involving 1982 channels with 18 sectors in the log-derivative

propagation and 12 sectors in the Airy propagation


The command  hib_timer  creates the file  .../hib43/timing/time_output  which contains the wall and cpu times for

calculations at an initial value of the total energy and at subsequent vales of the total energy.  For both the Airy and Log-derivative

propagation algorithms fewer matrix-matrix operations are required at a subsequent energy.  Typically, the computation time

is reduced by a factor of 0.66 (2/3)  in the log-derivative propagation and  a factor of 0.2-0.25 in the Airy propagation.


In addition, version 10  of the Intel MKL math library or (to a lesser extent) the latest version of Apple's Accelerate framework take advantage

of parallelism to obtain significant time reductions on systems wih more than one core per cpu.  The file  .../hib43/timing/time_output

reports cpu and wall clock times for each calculation.  The wall time is the actual elapsed time for the job, while the cpu

time is the time the job would take on a single cpu.  The ratio of  t wall   to  t cpu   is a

measure of this reduction.


Sample times for the two test calculations are listed in the following tables.  It is clear that execution time depends not only

on the clock speed of the processor but also on the size of the available cache.


Also, a significant speed up can be obtained from use of the 64-bit, rather than 32-bit, versions of Intel's compiler and MKL libraries.


Timing (min:sec); 961 Channel Close-Coupling Ar+N 2    a


------------------------------


OS

Compiler

Library

CPU

speed
(GHz)

RAM
(GB)

Cache
(MB)   b

Bus Speed
(MHz)

Threads   c


Log-Deriv
1 st  Energy

Log-Deriv
2 nd  Energy

Airy
1 st  Energy

Airy
2 nd  Energy


------------------------------


OSX 10.5.2

ifort 10.1
32 bit    d

MKL 10.0.2
32 bit   f

Core 2 Duo

2.4

4

4

800


2:58
1:59

1:58
1:09

1:28
0:53

0:30
0:15


------------------------------


OSX 10.5.2

ifort 10.1
64 bit   f

MKL 10.0.2
64 bit   h

Core 2 Duo

2.4

4

4

800


2:25
1:31

1:31
0:46

1:14
0:42

0:25
0:14


------------------------------


OSX 10.5.2

ifort 10.1
64 bit   f

vecLib 1.4.2

Core 2 Duo

2.4

4

4

800


2:54
2:28

1:58
1:20

2:02
1:35

0:38
0:24


------------------------------


OSX 10.3.9

xlf 8.1

vecLib 1.0.3

G5

2

4

0.5

1000


5:33
5:33

3:43
3:43

2:47
2:47

0:48
0:48


------------------------------


OSX 10.5.2

ifort 10.1
64 bit   f

MKL 10.0.2
64 bit   h

Dual Xeon
dual-core

2.66

5

4

1333


3:04
0:48

2:01
0:31

1:25
0:24

0:28
0:07


------------------------------


OSX 10.6.5

ifort 12.0.0
64 bit   f

MKL 10.3
64 bit   h

Core i7
dual-core

2.66

8

4

1067

2

1:52
0:59

1:16
0:38

0:58
0:30

0:19
0:10


------------------------------


OSX 10.6.5

ifort 12.0.0

MKL 10.3

Dual Xeon 5600
hex-core

2.93

48

12

1333

6

2:41
0:28

1:46
0:18

2:28
0:33

1:34
0:318


------------------------------


OSX 10.6.5

ifort 12.0.0

MKL 10.3

Dual Xeon 5600
hex-core

2.93

48

12

1333

12

4:05
0:22

2:37
0:13

3:40
0:28

2:24
0:15


------------------------------


Linux
RedHat 4

ifort 10.1
64 bit   f

MKL 10.0.0
64 bit   h

Quad Xeon
dual-core

2.0

4

1

1333


2:42
0:57

2:02
1:27

1:47
0:30

0:36
0:10


------------------------------


Linux
RedHat 4

ifort 10.1
64 bit   f

MKL 10.0.0
64 bit   h

Eight Xeon
quad-core

2.33

8

3

1333


4:17
0:41

3:18
1:19

5:47
1:27

0:50
0:12


------------------------------


Linux
RedHat 4

ifort 10.1
64 bit   f

MKL 10.0.0
64 bit   h

Quad Xeon
dual-core

2.66

8

1.5

1333


2:16
0:43

1:44
1:22

1:26
0:24

0:31
0:14


------------------------------


Linux
RedHat 4

ifort 10.1
64 bit   f

MKL 10.0.0
64 bit   h

Quad Xeon
single-core

3.0

4

2

800


6:36
3:20

4:30
1:59

4:25
1:10

1:35
0:25


------------------------------


Linux
RedHat 4

ifort 10.1
64 bit   f

MKL 10.0.0
64 bit   h

Dual Xeon
single-core

3.2

4

0.5

800


2:40
2:50

1:51
1:546

1:47
1:04

0:37
0:19


------------------------------


Linux
RedHat 5.5

ifort 12.0
64 bit   f

MKL 10.3
64 bit   h

Dual Xeon
hex-core

3.33

24

6

1333

6

2:18
0:25

1:18
0:13

1:07
0:13

0:20
0:03.4


------------------------------


Linux
RedHat 5.5

ifort 12.0
64 bit   f

MKL 10.3
64 bit   h

Dual Xeon
hex-core

3.33

24

12

1333

12

3:23
0:22

1:53
0:099

1:46
0:11

0:27
0:02.3


------------------------------


a)  The first and second entries correspond, respectively, to   the total cpu time and to the elapsed

time.  The ratio of the total cpu time to the elapsed time is a measure of the gain due to  parallelism in the LAPACK

routines in the indicated math libraries.


b)  Cache per processor.


c)  Number of threads allowed in the math library (MKL_NUM_THREADS).


d)  /opt/intel/fc


e)  /Library/Frameworks/Intel_MKL.framework/Versions/Current/lib/32


f)  /opt/intel/fce


g)  /Library/Frameworks/Intel_MKL.framework/Versions/Current/lib/em64t


h)  .../lib/em64t


Timing (min:sec); 1982 Channel Close-Coupling Ar+NO    a


------------------------------


OS

Compiler

Library

CPU

speed
(GHz)

RAM
(GB)

Cache
(MB)   b

Bus Speed
(MHz)

Threads   c


Log-Deriv
1 st  Energy

Log-Deriv
2 nd  Energy

Airy
1 st  Energy

Airy
2 nd  Energy


------------------------------


OSX 10.5.2

ifort 10.1
32 bit

MKL 10.0.2
32 bit

Core 2 Duo

2.4

4

4

800


3:25
2:28

2:14
1:13

5:19
3:02

1:50
0:60


------------------------------


OSX 10.5.2

ifort 10.1
64 bit

MKL 10.0.2
64 bit

Core 2 Duo

2.4

4

4

800


2:39
2:03

1:43
0:57

4:42
2:41

1:31
0:49


------------------------------


OSX 10.5.2

ifort 10.1
64 bit

vecLib 1.4.2

Core 2 Duo

2.4

4

4

800


5:18
3:08

2:49
1:39

6:47
4:25

2:27
1:33


------------------------------


OSX 10.3.9

xlf 8.1

vecLib

G5

2

4

0.5

1000


10:38
10:38

6:58
6:58

8:43
8:43

3:05
3:05


------------------------------


OSX 10.5.2

ifort 10.1

MKL 10.0.2

Dual Xeon
dual-core

2.66

5

4

1333


3:04
1:03

1:58
0:34

4:37
1:29

1:33
0:27


------------------------------


OSX 10.6.5

ifort 12.0.0

MKL 10.3

Core i7
dual-core

2.66

8

4

1067

2

2:04
1:10

1:19
0:41

3:14
1:44

1:09
0:36


------------------------------


OSX 10.6.5

ifort 12.0.0

MKL 10.3

Dual Xeon 5600
hex-core

2.93

48

12

1333

6

2:04
1:10

1:19
0:41

3:14
1:44

1:09
0:36


------------------------------


OSX 10.6.5

ifort 12.0.0

MKL 10.3

Dual Xeon 5600
hex-core

2.93

48

12

1333

12

2:04
1:10

1:19
0:41

3:14
1:44

1:09
0:36


------------------------------


Linux
RedHat 4

ifort 10.1
64 bit

MKL 10.0.0
64 bit

Quad Xeon
dual-core

2.0

4

4

1333


3:51
3:18

2:34
2:54

5:44
2:18

2:01
1:24


------------------------------


Linux
RedHat 4

ifort 10.1
64 bit

MKL 10.0.0
64 bit

Eight Xeon
quad-core

2.33

8

1.5

1333


5:46
1:27

3:56
1:45

5:44
1:04

2:25
0:29


------------------------------


Linux
RedHat 4

ifort 10.1
64 bit

MKL 10.0.0
64 bit

Quad Xeon
dual-core

2.66

8

2

1333


3:13
1:09

2:08
1:43

4:40
1:29

1:38
0:44


------------------------------


Linux
RedHat 4

ifort 10.1
64 bit

MKL 10.0.0
64 bit

Quad Xeon
single-core

3.0

4

0.5

800


9:27
2:55

6:17
2:28

16:07
4:30

5:30
1:37


------------------------------


Linux
RedHat 5.5

ifort 12.0
64 bit   f

MKL 10.3
64 bit   h

Dual Xeon
hex-core

3.38

24

12

1333

6

2:25
0:37

1:34
0:19

2:47
0:39

1:08
0:14


------------------------------


Linux
RedHat 5.5

ifort 12.0
64 bit   f

MKL 10.3
64 bit   h

Dual Xeon
hex-core

3.38

24

12

1333

12

3:38
0:31

2:15
0:15

3:42
0:30

0:26
0:10


------------------------------


a)  The first and second entries correspond, respectively, to   the total cpu time and to the elapsed

time.  The ratio of the total cpu time to the elapsed time is a measure of the gain due to  parallelism in the LAPACK

routines in the indicated math libraries.


------------------------------


Go to


[Installation](install.html)   |  [Close Coupled Equations](closecoupled.html)   |

[Linking](linking.html)   |   [Memory Use](memory.html)   |

[Restarting](restart.html)   |   [Parallelism](parallel.html)    |  [Hibridon Help](hibhelp.html)
